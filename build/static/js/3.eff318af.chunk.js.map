{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","views/ContactsView.jsx"],"names":["module","exports","operationsExportObject","addContact","contact","dispatch","actions","addContactsRequest","axios","post","then","data","addContactsSuccess","catch","error","addContactsError","deleteContact","id","deleteContactsRequest","delete","deleteContactsSuccess","deleteContactsError","fetchContacts","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","massage","getAllContacts","state","contacts","items","getFilterContacts","filter","selectorsExportObject","getVisibleContacts","createSelector","name","searchFilter","toLowerCase","includes","getError","ContactForm","number","handelNameChange","event","setState","target","value","handleSubmit","preventDefault","props","find","item","alert","onSubmit","resetForm","this","className","styles","form","label","type","pattern","title","required","onChange","input","button","Component","connect","contactsSelectors","text","contactsOperations","ContactList","onDeleteContacts","list","map","list_item","list_text","onClick","list_button","defaultProps","onDeleteContact","e","contactsActions","changeFilter","children","div","length","ContactsView"],"mappings":"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","file":"static/js/3.eff318af.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"label\":\"ContactForm_label__378f8\",\"input\":\"ContactForm_input__gm87B\",\"button\":\"ContactForm_button__1MLZK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2T7aG\",\"list_item\":\"ContactList_list_item__3uTNX\",\"list_text\":\"ContactList_list_text__16cIL\",\"list_button\":\"ContactList_list_button__3NhD0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__3DcZT\",\"input\":\"Filter_input__2DoVp\"};","import axios from \"axios\";\nimport actions from \"./contacts-actions\";\n\nconst addContact = contact => dispatch => {\n  dispatch(actions.addContactsRequest());\n  axios\n    .post(\"/contacts\", contact)\n    .then(({ data }) => dispatch(actions.addContactsSuccess(data)))\n    .catch(error => dispatch(actions.addContactsError(error)));\n};\n\nconst deleteContact = id => dispatch => {\n  dispatch(actions.deleteContactsRequest());\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(actions.deleteContactsSuccess(id)))\n    .catch(error => dispatch(actions.deleteContactsError(error)));\n};\n\nconst fetchContacts = () => dispatch => {\n  dispatch(actions.fetchContactsRequest());\n  axios\n    .get(`/contacts/`)\n    .then(({ data }) => dispatch(actions.fetchContactsSuccess(data)))\n    .catch(error => dispatch(actions.fetchContactsError(error.massage)));\n};\n\nconst operationsExportObject = {\n  addContact,\n  deleteContact,\n  fetchContacts\n};\n\nexport default operationsExportObject;\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getAllContacts = state => state.contacts.items;\nconst getFilterContacts = state => state.contacts.filter;\nconst getError = state => state.error;\n\nconst getVisibleContacts = createSelector(\n  [getAllContacts, getFilterContacts],\n  (contacts, filter) =>\n    contacts.filter(({ name }) => {\n      const searchFilter = filter.toLowerCase();\n      return name.toLowerCase().includes(searchFilter);\n    })\n);\n\nconst selectorsExportObject = {\n  getAllContacts,\n  getVisibleContacts,\n  getFilterContacts,\n  getError\n};\n\nexport default selectorsExportObject;\n","import { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styles from \"./ContactForm.module.css\";\nimport { connect } from \"react-redux\";\nimport contactsOperations from \"../../redux/contacts/contacts-operations\";\nimport contactsSelectors from \"../../redux/contacts/contacts-selectors\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\"\n  };\n\n  handelNameChange = event => {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const { name } = this.state;\n    const isNameExist = this.props.items.find(item => item.name === name);\n    if (isNameExist) {\n      alert(`${name} is already in contacts`);\n    } else {\n      this.props.onSubmit(this.state);\n    }\n\n    this.resetForm();\n  };\n\n  resetForm = () => {\n    this.setState({\n      name: \"\",\n      number: \"\"\n    });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className={styles.form}>\n        <label className={styles.label}>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={this.state.name}\n            onChange={this.handelNameChange}\n            className={styles.input}\n          />\n        </label>\n        <label className={styles.label}>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            // pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n            // title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n            // required\n            value={this.state.number}\n            onChange={this.handelNameChange}\n            className={styles.input}\n          />\n        </label>\n        <button type=\"submit\" className={styles.button}>\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  items: contactsSelectors.getAllContacts(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: text => dispatch(contactsOperations.addContact(text))\n});\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired\n    })\n  )\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import styles from \"./ContactList.module.css\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport contactsOperations from \"../../redux/contacts/contacts-operations\";\nimport contactsSelectors from \"../../redux/contacts/contacts-selectors\";\n\nconst ContactList = ({ contacts, onDeleteContacts }) => (\n  <ul className={styles.list}>\n    {contacts.map(contact => (\n      <li key={contact.id} className={styles.list_item}>\n        <span className={styles.list_text}>{contact.name}:</span>\n        <span className={styles.list_text}>{contact.number}</span>\n        <button\n          type=\"button\"\n          onClick={() => onDeleteContacts(contact.id)}\n          className={styles.list_button}\n        >\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nconst mapStateToProps = state => {\n  return {\n    contacts: contactsSelectors.getVisibleContacts(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContacts: text => dispatch(contactsOperations.deleteContact(text))\n});\n\nContactList.defaultProps = {\n  contacts: [],\n  onDeleteContact: () => {}\n};\n\nContactList.propTypes = {\n  onDeleteContacts: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired\n    })\n  )\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import PropTypes from \"prop-types\";\nimport styles from \"./Filter.module.css\";\nimport { connect } from \"react-redux\";\nimport contactsActions from \"../../redux/contacts/contacts-actions\";\nimport contactsSelectors from \"../../redux/contacts/contacts-selectors\";\n\nconst Filter = ({ filter, items, onChange, children }) => {\n  return (\n    <div className={styles.div}>\n      {items.length > 0 && (\n        <label className={styles.label}>\n          Find contact by name\n          <input\n            type=\"text\"\n            value={filter}\n            onChange={onChange}\n            className={styles.input}\n          ></input>\n        </label>\n      )}\n      {children}\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  items: contactsSelectors.getAllContacts(state),\n  filter: contactsSelectors.getFilterContacts(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(contactsActions.changeFilter(e.target.value))\n});\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport ContactList from \"../components/ContactForm/ContactForm\";\nimport ContactForm from \"../components/ContactList/ContactList\";\nimport Filter from \"../components/Filter/Filter\";\nimport contactsActions from \"../redux/contacts/contacts-operations\";\nimport contactsSelectors from \"../redux/contacts/contacts-selectors\";\n\nclass ContactsView extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Phonebook</h2>\n        <ContactForm />\n        <Filter>\n          <h2>Contact</h2>\n        </Filter>\n        <ContactList />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  error: contactsSelectors.getError(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsActions.fetchContacts())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);\n"],"sourceRoot":""}